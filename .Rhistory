tapply(A, fSolver,mean)
tapply(A, A$solver,mean)
tapply.stat(A$time, A$solver, stat="mean")
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
time.mean
barplot(time.mean$A$time, time.mean$A$solver)
time.mean$A$time
time.mean$time
time.mean
time.mean[:,2]
time.mean[,2]
barplot(time.mean[,2], names.arg = time.mean[,1])
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
P <- read.csv("~/Desktop/Reading/Optimization Model Files/paramruntimes.csv")
P
head(P)
P$NumFocus <- factor(P$NumFocus)
head(P)
P$Heuristics <- factor(P$Heuristics)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
model3 = lm(time~fSolver+iter+fSolver*iter)
model3
summary(model3)
anova(model3)
model3 = lm(time~fSolver+iter)
anova(model3)
summary(model3)
plot(model3)
scheffe.test(model3,"fSolver", alpha = .25, console = TRUE)
scheffe.test(model3,"fSolver", alpha = .05, console = TRUE)
scheffe.test(model3,"fSolver", alpha = .1, console = TRUE)
TukeyHSD(model3, ordered = FALSE, conf.level = .8)
model3 = aov(time~fSolver+iter)
plot(model3)
plot(model3)
anova(model3)
scheffe.test(model3,"fSolver", alpha = .1, console = TRUE)
TukeyHSD(model3, ordered = FALSE, conf.level = .8)
TukeyHSD(model3, ordered = FALSE, conf.level = .9)
model4 <- aov(P$time~P$NumFocus+P$Heuristics+P$MIPGap+P$MIPFocus)
anova(model4)
scheffe.test(model3,"P$NumFocus", alpha = .1, console = TRUE)
scheffe.test(model4,"P$NumFocus", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPFocus", alpha = .1, console = TRUE)
TukeyHSD(model4, ordered = FALSE, conf.level = .9)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
l<- matrix(c(1,2,3,4), 2, 2, byrow = TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
plot(model4)
plot(anova(model4))
library(corrplot)
M <- cor(P)
install.packages(corrplot)
pairs(P)
ParamData <- cbind(P$time,P$NumFocus,P$Heuristics,P$MIPGap,P$MIPFocus)
colnames(ParamData) <- c("time", "NumFocus", "Heur", "Gap", "MIPFocus")
pairs(ParamData)
param.pca <- princomp(ParamData, scores=TRUE, cor = TRUE)
summary(param.pca)
plot(param.pca)
biplot(param.pca)
layout(1)
biplot(param.pca)
param.pca <- princomp(ParamData, scores=FALSE, cor = TRUE)
summary(param.pca)
biplot(param.pca)
plot(param.pca)
param.pca <- princomp(ParamData, scores=TRUE, cor = TRUE)
summary(param.pca)
param.pca$loadings
glm(P$time~P$NumFocus+P$Heuristics+P$MIPGap+P$MIPFocus,family="binomial")
glm(P$time~P$NumFocus+P$Heuristics+P$MIPGap+P$MIPFocus)
require(psych)
install.packages("pysch")
install.packages("psych")
require(psych)
library(psych)
require(psych)
g <- glm(P$time~P$NumFocus+P$Heuristics+P$MIPGap+P$MIPFocus)
plot(g)
P.corr <- cor(P)
cor(ParamData)
heatmap(ParamData)
corrplot(ParamData)
cor.plot(ParamData)
install.packages("corrplot")
Param.cor <- cor(ParamData)
corrplot(Param.cor)
library(corrplot)
corrplot(Param.cor)
library(corrplot)
Param.cor <- cor(ParamData)
corrplot(Param.cor)
corrplot(Param.cor, method = "ellipse", type = "upper", tl.col = "black", tl.srt =45, )
corrplot(Param.cor, method = "ellipse", type = "upper", tl.col = "black", tl.srt =45)
corrplot.mixed(Param.cor, lower = "number", upper="ellipse", type = "upper", tl.col = "black", tl.srt =45)
corrplot.mixed(Param.cor, lower = "number", upper="ellipse", tl.col = "black", tl.srt =45)
corrplot.mixed(Param.cor, lower = "number", upper="ellipse", tl.col = "black", tl.srt =45)
corrplot.mixed(Param.cor, lower = "number", upper="ellipse", tl.col = "black", tl.srt =45, order = "AOE")
Param.cor
P.mr <- glm(time ~ NumFocus + Heuristics + MIPGap + MIPFocus, data = P)
P.mr
P.mr <- lm(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
summary(P.mr)
aov(P.mr)
aov(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
g <- aov(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
g
summary(g)
TukeyHSD(g, ordered = FALSE, conf.level = .9)
model4 <- aov(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
scheffe.test(model4,"P$MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPFocus", alpha = .1, console = TRUE)
scheffe.test(model4,"P$Heuristics", alpha = .1, console = TRUE)
TukeyHSD(model4, ordered = FALSE, conf.level = .9)
scheffe.test(model4,"P$Heuristics", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"MIPGap", alpha = .1, console = TRUE)
model4
P
summary(P)
model4 <- aov(time ~ NumFocus + factor(Heuristics) + MIPGap + factor(MIPFocus), data = P)
scheffe.test(model4,"MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPFocus", alpha = .1, console = TRUE)
model4 <- aov(time ~ NumFocus + Heuristics + MIPGap + MIPFocus, data = P)
scheffe.test(model4,"MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"P$MIPFocus", alpha = .1, console = TRUE)
scheffe.test(model4,"P$Heuristics", alpha = .1, console = TRUE)
scheffe.test(model4,"MIPGap", alpha = .1, console = TRUE)
scheffe.test(model4,"MIPFocus", alpha = .1, console = TRUE)
scheffe.test(model4,"Heuristics", alpha = .1, console = TRUE)
cor(model4)
cor(P)
ylab="Time (sec)",
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
barplot(time.mean[,2], names.arg = time.mean[,1], col = boxcolors, main = "Average Solution Time (sec)", sub= "by Solver")
barplot(time.mean[,2], names.arg = time.mean[,1], col = boxcolors, main = "Average Solution Time\nBy Solver")
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
plot(cor(P))
plot(cor(as.numeric(P))
)
ParamData <- cbind(P$time,P$NumFocus,P$Heuristics,P$MIPGap,P$MIPFocus)
colnames(ParamData) <- c("time", "NumFocus", "Heur", "Gap", "MIPFocus")
# P.mr <- lm(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
# summary(P.mr)
##Doesn't really make sense here, just playing...
#library(corrplot)
Param.cor <- cor(ParamData)
# corrplot.mixed(Param.cor, lower = "number", upper="ellipse", tl.col = "black", order = "AOE")
Param.cor
Param.cor$time
Param.cor[1,]
Param.cor[1,2:end]
Param.cor[1,2:5]
cov(ParamData)
cov(ParamData)[1,2:5]
barplot(cov(ParamData)[1,2:5])
layout(1)
barplot(cov(ParamData)[1,2:5])
barplot(cov(ParamData)[1,2:5], col=boxcolors)
barplot(-cov(ParamData)[1,2:5], col=boxcolors)
P.mr <- lm(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = ParamData)
P.mr <- lm(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
cor(P.mr)
cov(P.mr)
barplot(cor(ParamData)[1,2:5], col=boxcolors)
P.mr <- lm(time ~ factor(NumFocus) + factor(Heuristics) + factor(MIPGap) + factor(MIPFocus), data = P)
summary(P.mr)
P.mr <- lm(time ~ NumFocus + Heuristics + MIPGap + MIPFocus, data = P)
summary(P.mr)
plot(P.mr)
plot(P.mr)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
aov(time~P$MIPFocus)
aov(P$time~P$MIPFocus)
scheffe.test(aov(P$time~P$MIPFocus), "P$MIPFocus", alpha = .1, console = TRUE)
pairwise.t.test(P$time, P$MIPFocus, p.adj = 'bonferroni', pool.sd=F)
layout(c(1,2))
plot(P.mr)
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
par(mfrow=c(2,1))
plot(P.mr)
#Heteroscedasticity in the Residuals vs. Fitted suggests a non-constant variance
source('~/Desktop/Reading/Analysis/SolutionAnalysis.R', echo=TRUE)
citation()
citation("agricolae")
# Empirical Modeling HW1
##MAJ Matthew Ferguson
##
setwd("~/Desktop/EmpModel/")
### Problem 2.7
p2_7 <- read.csv("Problem2_7.csv", sep = ",")
head(p2_7)
?read.csv
p2_7 <- read.csv("Problem2_7.csv", header=TRUE, sep = ",")
?read.csv
head(p2_7)
p2_7 <- read.csv("Problem2_7.csv", strip.white = TRUE, header=TRUE, sep = ",")
head(p2_7)
p2_7 <- read.csv("Problem2_7.csv", strip.white = TRUE, header=TRUE, sep = ",")
p2_7 <- read.csv("Problem2_7.csv", header=TRUE, sep = ",")
head(p2_7)
purity <- p2_7$purity
hydro <-p2_7$hydro
###Model
m <- model(purity~hydro)
m <- aov(purity~hydro)
model <- aov(purity~hydro)
summary(model)
summary(model)
anova(model)
## Problem 2.7
### Problem set-up: I've adjusted the datafiles to a csv format
p2_7 <- read.csv("Problem2_7.csv", strip.white = TRUE, header=TRUE, sep = ",")
### Construct a linear model of purity as a function of hydro
model <- lm(purity~hydro, data=p2_7)
summary(model)
# > summary(model)
#                Df Sum Sq Mean Sq  F value  Pr(>F)
#   hydro        1  148.3  148.31   11.47    0.00329 **
#   Residuals   18  232.8   12.94
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
anova(model)
coefficients(model)
cor(model)
cor(p2_7$purity, p2_7$hydro)
cor(p2_7$hydro, p2_7$purity)
summary(model)
plot(model)
plot(purity~hydro, data=p2_7)
summary(model)$r.squared
confint(model, hydro)
confint(model, purity)
confint(model, hydro)
confint(model, hydro)
confint(model, hydro, level =.95)
confint(model, p2_7$hydro, level =.95)
confint(model, hydro, level =.95)
confint(model, level=.975)
confint(mode, hydro)  #alpha = 5% is default
confint(model, hydro)  #alpha = 5% is default
e <- predict(model, data.frame(hydro=1), se.fit =1, interval='conf', level=.95)
e
e <- predict(model, data.frame(hydro=1), interval='conf', level=.95)
e
predict(model, data.frame(hydro=1), interval='conf', level=.95)
anova.lm(model)
confint.lm(model)
confint.glm(model)
library(MASS)
confint.lm(model)
confint(model)
summary(model)
model
summary(model)
coef(summary(model))
slope <- coef(summary(model))
slope$estimate[hydro]
slope$estimate(hydro)
slope$Estimate
slope
slope$hydro
slope[1]
slope[2]
slope[3]
slope[4]
qt(.25,18)
qt(.025,18)
length(p2_7)
length(model_)
length(model)
length(p2_7$hydro)
disp("Hi")
print("Hi")
lower <- slope.est - qt(alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(alpha/2, n-2) * slope.stderr
print([lower, upper])
print(str(lower) + ", " str(upper))
print(str(lower) + ", " + str(upper))
lower <- slope.est - qt(alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(alpha/2, n-2) * slope.stderr
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(alpha/2, n-2) * slope.stderr
print(str(lower) + ", " + str(upper))
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(1 - alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(1 - alpha/2, n-2) * slope.stderr
print(str(lower) + ", " + str(upper))
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(1 - alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(1 - alpha/2, n-2) * slope.stderr
CI <- (lower, upper)
print(CI, digits=2)
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(1 - alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(1 - alpha/2, n-2) * slope.stderr
CI <- c(lower, upper)
print(CI, digits=2)
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(1 - alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(1 - alpha/2, n-2) * slope.stderr
CI <- c(lower, upper)
print(CI, digits=3)
predict(model, data.frame(hydro=1), interval='conf', level=.95)
p2_8 <- read.csv("Problem2_7.csv", strip.white = TRUE, header=TRUE, sep = ",")
cor(p2_8$purity, p2_8$hydro)
sqrt(cor(p2_8$purity, p2_8$hydro))
cor(p2_8$purity, p2_8$hydro)^2
# Empirical Modeling HW1
##MAJ Matthew Ferguson
##
setwd("~/Desktop/EmpModel/")
## Problem 2.7
### First of all, there is a typo on the chart in the book ("Purily" vs. "Purity").
### Problem set-up: I've adjusted the datafiles to a csv format
p2_7 <- read.csv("Problem2_7.csv", strip.white = TRUE, header=TRUE, sep = ",")
###Part a: Fit a simple linear regression to the data
### Construct a linear model of purity as a function of hydro
model <- lm(purity~hydro, data=p2_7)
###/----------------------------------------/
###Part b: Test H_0: Beta_1 =0
### Let H_a be Beta_1 != 0
summary(model)
# Call:
#   lm(formula = purity ~ hydro, data = p2_7)
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -4.6724 -3.2113 -0.0626  2.5783  7.3037
#
# Coefficients:
#               Estimate Std. Error t value Pr(>|t|)
# (Intercept)     77.863      4.199  18.544 3.54e-13 ***
#   hydro         11.801      3.485   3.386  0.00329 **
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 3.597 on 18 degrees of freedom
# Multiple R-squared:  0.3891,	Adjusted R-squared:  0.3552
# F-statistic: 11.47 on 1 and 18 DF,  p-value: 0.003291
### The probability of observing a more extreme value than our test statistic, t
### (or the "Pr(>|t|)" value) is only 3.29E-3, implying that it is unlikely we
### observed such as extreme value by chance.  Based upon our sample date, we should
### then reject H_0 in favor of H_a.
###/----------------------------------------/
### Part c: Calculate R^2
### The second to the last line of the summary(model) command provides
# Multiple R-squared:  0.3891,	Adjusted R-squared:  0.3552
### To access directly:
summary(model)$r.squared
# [1] 0.3891224
###The unadjusted correlation coefficient is then roughly .39
###/----------------------------------------/
### Part d: Find a 95% CI on the slope
### If we desire a simultaneous estimate of slope and intercept
### (using the Bonferroni method) we could use:
confint(model, level=.975)
#               1.25 %  98.75 %
# (Intercept) 67.596979 88.12959
# hydro        3.279893 20.32216
### Since the intercept is significant, I would recommend this.
### However, we can manually calculate the 95% CI
### of just the slope with:
model.coefs <- coef(summary(model))
alpha=.05
n<-length(p2_7$hydro)
slope.est <- model.coefs[2]
slope.stderr <- model.coefs[4]
lower <- slope.est - qt(1 - alpha/2, n-2) * slope.stderr
upper <- slope.est + qt(1 - alpha/2, n-2) * slope.stderr
CI <- c(lower, upper)
print(CI, digits=3)
#[1]  4.48 19.12
### these are the lower and upper bounds of the 95% CI of the slope
###/----------------------------------------/
### Part e: Find a 95% conf interval on purity
### when the hydrocarbon percentage is 1.00.
predict(model, data.frame(hydro=1), interval='conf', level=.95)
# fit        lwr      upr
# 1 89.66431 87.51017 91.81845
### Therefore the CI is (87.5, 91.8).
###/----------------------------------------/
###/----------------------------------------/
## Problem 2.8
### Problem set-up: I've adjusted the datafiles to a csv format
### and this uses the same data as Problem 2.7.
sqrt(summary(model)$r.squared)
cor(p2_8$purity, p2_8$hydro)
t_nought <- model.corr * sqrt(n-2) / (sqrt(1-model.corr^2))
model.corr <- sqrt(summary(model)$r.squared)
t_nought <- model.corr * sqrt(n-2) / (sqrt(1-model.corr^2))
r <- sqrt(summary(model)$r.squared)
### or cor(p2_7$purity, p2_7$hydro), but that might
### not demonstrate my understanding of the material
t_nought <- r * sqrt(n-2) / (sqrt(1-r^2))
dt(t_nought, n-2)
qt(alpha/2,n-2)
t_nought + qt(alpha/2,n-2)
dt(t_nought, n-2)
pt(t_nought, n-2)
pt(t_nought, n-2)
1-pt(t_nought, n-2)
qt(alpha/2,n-2)
qt(1-alpha/2,n-2)
abs(t_nought)
tanh(atanh(r-qnorm(.25)/sqrt(n-3)))
tanh(atanh(r+qnorm(.25)/sqrt(n-3)))
tanh(atanh(r-qnorm(.025)/sqrt(n-3)))
qnorm(.025)
tanh(atanh(r-qnorm(.025)/sqrt(n-3)))
tanh(atanh(r+qnorm(.025)/sqrt(n-3)))
tanh(atanh(r+qnorm(1- .025)/sqrt(n-3)))
tanh(atanh(r-qnorm(1- .025)/sqrt(n-3)))
tanh(atanh(r+qnorm(.025)/sqrt(n-3)))
tanh(atanh(r-qnorm(.025)/sqrt(n-3)))
tanh(atanh(r+qnorm(.025)/sqrt(n-3)))
tanh(atanh(r-(qnorm(alpha/2)/sqrt(n-3)))
)
tanh(atanh(r+ (qnorm(alpha/2)/sqrt(n-3))))
tanh(atanh(r+ (qnorm(1- alpha/2)/sqrt(n-3))))
tanh(atanh(r+ (qnorm(alpha/2)/sqrt(n-3))))
r
library(psych)
fisherz(r)
r.con(r,20)
tanh(atanh(r+ (qnorm(alpha/2,lower.tail=0)/sqrt(n-3))))
tanh(atanh(r- (qnorm(alpha/2,lower.tail=0)/sqrt(n-3))))
p2_10 <- read.csv("Problem2_10.csv", strip.white = TRUE, header=TRUE, sep = ",")
head(p2_10)
r_10 <- cor(p2_10$weight, p2_10$sys.bp)
model2 <- lm(sys.bp~weight, data=p2_10)
summary(model)
summary(model2)
model2$coefficients
model2.t_nought <- model2.r * sqrt(n-2) / (sqrt(1-model2.r^2))
model2.r <- cor(p2_10$weight, p2_10$sys.bp)
model2.t_nought <- model2.r * sqrt(n-2) / (sqrt(1-model2.r^2))
qt(1-alpha/2,n-2)
model2.t_nought
model2.r <- cor(p2_10$weight, p2_10$sys.bp)
n <- 26
model2.t_nought <- model2.r * sqrt(n-2) / (sqrt(1-model2.r^2))
qt(1-alpha/2,n-2)
r.con(model2.r, n)
atanh(model2.r)
(atanh(model2.r)-atanh(.6))*sqrt(n-3)
qnorm(.975)
qnorm(.95)
model3 <- lm(sys.bp~0+weight, data=p2_10)
summary(model3)
plot(sys.bp~0+weight, data=p2_10)
plot(model2)
plot(model3)
scatter(model3)
plot(sys.bp~0+weight, data=p2_10)
plot(sys.bp~0+weight, data=p2_10)
xlim(c(0,240))
plot(sys.bp~0+weight, data=p2_10, xlim=c(0,240))
plot(sys.bp~weight, data=p2_10, xlim=c(0,240))
plot(sys.bp~weight, data=p2_10, xlim=c(0,240), ylim=(0, 170))
plot(sys.bp~weight, data=p2_10, xlim=c(0,240), ylim=(0,170))
plot(sys.bp~weight, data=p2_10, xlim=c(0,240), ylim=(0 170))
plot(sys.bp~weight, data=p2_10, xlim=c(0,240)
)
p3_1 <- read.csv("TableB_1.csv", strip.white = TRUE, header=TRUE, sep = ",")
p3_1
model <- lm(y~x2+x7+x8, data = p3_1)
summary(model)
model <- lm(y~0+x2+x7+x8, data = p3_1)
summary(model)
anova(model)
aov(model)
